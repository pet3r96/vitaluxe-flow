name: Deploy Vitaluxe to AWS Lightsail

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üß© Checkout Repository
        uses: actions/checkout@v4

      - name: ‚úÖ Validate Required Secrets
        run: |
          required_secrets=("AWS_ROLE_ARN" "AWS_REGION" "ECR_REPOSITORY" "LIGHTSAIL_SERVICE_NAME")
          missing=false
          for secret in "${required_secrets[@]}"; do
            if [ -z "${!secret}" ]; then
              echo "::error::Missing required secret: $secret"
              missing=true
            else
              echo "$secret: ‚úì"
            fi
          done
          if [ "$missing" = true ]; then
            echo "::error::One or more required secrets are missing. Aborting."
            exit 1
          fi

      - name: üîê Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üíæ Cache Docker Layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: üß± Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: vitaluxe-app:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: üîç Scan Docker Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vitaluxe-app:latest'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: üöÄ Login & Push to Amazon ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          echo "üîê Logging into Amazon ECR..."
          ACCOUNT_ID=$(echo "$ECR_REPOSITORY" | cut -d'.' -f1)
          REGION=$(echo "$ECR_REPOSITORY" | cut -d'.' -f4)
          echo "Using AWS account: $ACCOUNT_ID"
          echo "Using region: $REGION"

          aws ecr get-login-password --region "$REGION" | docker login --username AWS --password-stdin "$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com"

          COMMIT_SHA=$(echo "${GITHUB_SHA::7}")
          docker tag vitaluxe-app:latest "$ECR_REPOSITORY:$COMMIT_SHA"
          docker tag vitaluxe-app:latest "$ECR_REPOSITORY:latest"

          echo "üì¶ Pushing Docker image to ECR..."
          docker push "$ECR_REPOSITORY:$COMMIT_SHA"
          docker push "$ECR_REPOSITORY:latest"

      - name: ‚òÅÔ∏è Deploy to AWS Lightsail
        env:
          LIGHTSAIL_SERVICE_NAME: ${{ secrets.LIGHTSAIL_SERVICE_NAME }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          LIGHTSAIL_SERVICE_NAME=$(echo "$LIGHTSAIL_SERVICE_NAME" | tr -d '\n\r' | xargs)
          echo "üöÄ Deploying image to Lightsail service: $LIGHTSAIL_SERVICE_NAME"

          aws lightsail create-container-service-deployment \
            --service-name "$LIGHTSAIL_SERVICE_NAME" \
            --containers "{
              \"vitaluxe\": {
                \"image\": \"${ECR_REPOSITORY}:latest\",
                \"ports\": {\"80\": \"HTTP\"}
              }
            }" \
            --public-endpoint "{
              \"containerName\": \"vitaluxe\",
              \"containerPort\": 80
            }"

      - name: ‚è≥ Wait for Lightsail Deployment (Rollback on Failure)
        env:
          LIGHTSAIL_SERVICE_NAME: ${{ secrets.LIGHTSAIL_SERVICE_NAME }}
        run: |
          echo "‚è≥ Waiting for Lightsail deployment to finish..."
          SERVICE=$(echo "$LIGHTSAIL_SERVICE_NAME" | tr -d '\n\r' | xargs)
          SUCCESS=false
          for i in {1..30}; do
            STATUS=$(aws lightsail get-container-services \
              --query "containerServices[?serviceName=='$SERVICE'].state" \
              --output text)
            echo "Current status: $STATUS"
            if [[ "$STATUS" == "RUNNING" ]]; then
              echo "‚úÖ Deployment successful!"
              SUCCESS=true
              break
            elif [[ "$STATUS" == "DEPLOYING" ]]; then
              echo "‚åõ Still deploying... waiting 20s"
              sleep 20
            else
              echo "‚ö†Ô∏è Unexpected status: $STATUS"
              break
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo "‚ùå Deployment failed or timed out. Rolling back..."
            aws lightsail create-container-service-deployment \
              --service-name "$SERVICE" \
              --use-previous-deployment
            echo "üåÄ Rollback triggered. Waiting 60s..."
            sleep 60
            STATUS=$(aws lightsail get-container-services \
              --query "containerServices[?serviceName=='$SERVICE'].state" \
              --output text)
            echo "Post-rollback status: $STATUS"
          fi

          echo "üîó Fetching public service URL..."
          URL=$(aws lightsail get-container-services \
            --query "containerServices[?serviceName=='$SERVICE'].url" \
            --output text)
          echo "üåç Service URL: $URL"

      - name: üßæ Deployment Summary
        if: always()
        run: |
          echo "‚úÖ Vitaluxe deployment complete."
          echo "Check AWS Lightsail console for details or rollback confirmation."