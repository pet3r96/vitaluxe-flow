name: Deploy Vitaluxe to AWS Lightsail

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # üß© Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # ÔøΩ Step 2: Validate Environment Variables
      - name: Validate Required Secrets (masked presence)
        run: ./.github/scripts/validate-secrets.sh

      # ÔøΩüîê Step 3: Configure AWS credentials via OIDC
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # üê≥ Step 4: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # üì¶ Step 5: Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # üõ°Ô∏è Step 6: Build Docker image
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: vitaluxe-app:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # üîí Step 7: Scan Docker image for vulnerabilities
      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vitaluxe-app:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # üîë Step 8: Login & Push to Amazon ECR
      - name: Login & Push to ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          echo "üîê Logging into Amazon ECR..."

          # Extract account ID and region from ECR_REPOSITORY
          ACCOUNT_ID=$(echo "$ECR_REPOSITORY" | cut -d'.' -f1)
          REGION=$(echo "$ECR_REPOSITORY" | cut -d'.' -f4)
          echo "Using AWS account: $ACCOUNT_ID"
          echo "Using region: $REGION"

          # Login to ECR using the extracted region
          aws ecr get-login-password --region "$REGION" | docker login --username AWS --password-stdin "$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com"

          echo "üèóÔ∏è Tagging Docker image..."
          COMMIT_SHA=$(echo "${GITHUB_SHA::7}")
          docker tag vitaluxe-app:latest "$ECR_REPOSITORY:$COMMIT_SHA"
          docker tag vitaluxe-app:latest "$ECR_REPOSITORY:latest"

          echo "üì¶ Pushing image to ECR..."
          docker push "$ECR_REPOSITORY:$COMMIT_SHA"
          docker push "$ECR_REPOSITORY:latest"

      # üöÄ Step 9: Deploy to AWS Lightsail
      - name: Deploy to Lightsail
        env:
          LIGHTSAIL_SERVICE_NAME: ${{ secrets.LIGHTSAIL_SERVICE_NAME }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          echo "üöÄ Deploying new container version to Lightsail..."
          
          # Clean any trailing spaces/newlines
          LIGHTSAIL_SERVICE_NAME=$(echo "$LIGHTSAIL_SERVICE_NAME" | tr -d '\n' | tr -d '\r' | xargs)
          echo "Using Lightsail service: $LIGHTSAIL_SERVICE_NAME"

          aws lightsail create-container-service-deployment \
            --service-name "$LIGHTSAIL_SERVICE_NAME" \
            --containers "{
              \"vitaluxe\": {
                \"image\": \"${ECR_REPOSITORY}:latest\",
                \"ports\": {\"80\": \"HTTP\"}
              }
            }" \
            --public-endpoint "{
              \"containerName\": \"vitaluxe\",
              \"containerPort\": 80
            }"

      # ‚úÖ Step 10: Wait for Lightsail Deployment & Handle Rollback
      - name: Wait for Lightsail Deployment (with rollback)
        env:
          LIGHTSAIL_SERVICE_NAME: ${{ secrets.LIGHTSAIL_SERVICE_NAME }}
        run: |
          echo "‚è≥ Waiting for deployment to finish..."
          LIGHTSAIL_SERVICE_NAME=$(echo "$LIGHTSAIL_SERVICE_NAME" | tr -d '\n' | tr -d '\r' | xargs)

          SUCCESS=false
          for i in {1..30}; do
            STATUS=$(aws lightsail get-container-services \
              --query "containerServices[?serviceName=='$LIGHTSAIL_SERVICE_NAME'].state" \
              --output text)

            echo "Current status: $STATUS"
            if [[ "$STATUS" == "RUNNING" ]]; then
              SUCCESS=true
              echo "‚úÖ Deployment successful! Service is running."
              break
            elif [[ "$STATUS" == "DEPLOYING" ]]; then
              echo "Still deploying... waiting 20s"
              sleep 20
            else
              echo "‚ö†Ô∏è Unexpected status: $STATUS"
              break
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo "‚ùå Deployment failed or timed out ‚Äî rolling back to previous version..."
            aws lightsail create-container-service-deployment \
              --service-name "$LIGHTSAIL_SERVICE_NAME" \
              --use-previous-deployment

            echo "üåÄ Rollback initiated. Waiting 60s before verifying..."
            sleep 60

            STATUS=$(aws lightsail get-container-services \
              --query "containerServices[?serviceName=='$LIGHTSAIL_SERVICE_NAME'].state" \
              --output text)
            echo "Post-rollback status: $STATUS"
            if [[ "$STATUS" == "RUNNING" ]]; then
              echo "‚úÖ Rollback successful. Service restored to last working version."
            else
              echo "‚ö†Ô∏è Rollback executed but service not yet running. Check Lightsail console."
            fi
          fi

          echo "üîó Fetching service URL..."
          URL=$(aws lightsail get-container-services \
            --query "containerServices[?serviceName=='$LIGHTSAIL_SERVICE_NAME'].url" \
            --output text)
          echo "üåç Service URL: $URL"

      # üßæ Step 11: Final Summary
      - name: Deployment Summary
        if: always()
        run: |
          echo "‚úÖ Vitaluxe deployment process complete."
          echo "If any rollback occurred, review the Lightsail console for details."
